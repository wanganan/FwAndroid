apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {

    /**
     * 签名信息配置,需要写在defaultConfig和buildTypes前面,不然编译的时候会报错。
     * 通过android studio创建一个jks签名文件： 路径：Build—> Generate Signed Bundle/APK ---->APK---->Create new
     * 创建好后复制弹出的文本，如keytool -importkeystore -srckeystore E:\workspace\fwandroid.jks -destkeystore E:\workspace\fwandroid.jks -deststoretype pkcs12"
     * 进入cmd 命令行界面，输入刚复制的命令行将keystore文件转化为行业标准格式PKCS12
     *
     * 生成signingConfigs
     * 1.Project structure-Modules-Signing Configs-创建release-输入已创建的keystore信息
     * 2.Project structure-Modules-Default Config-Signing Config-选择$signingConfigs.release-OK
     *
     * 开发过程中使用发布模式：底部Build-BuildVariants-Build Variants-debug/release切换
     */
    signingConfigs {
        debug {
            storeFile file('fwandroid.jks')
            storePassword 'fwandroid'
            keyAlias = 'fwandroid'
            keyPassword 'fwandroid'
        }
        release {
            storeFile file('E:\\workspace\\fwandroid.jks')
            storePassword 'fwandroid'
            keyAlias = 'fwandroid'
            keyPassword 'fwandroid'
        }
    }
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    //默认配置
    defaultConfig {
        //versionName不能写在config.gradle下，不然获取到的versionName为1.0.01.0.0。
        versionCode 1
        versionName "1.0.0"

        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //Dalvik文件分包需要
        multiDexEnabled true
    }

    buildTypes {
        debug {
            //设置debug模式下加载的BaseUrl
            buildConfigField 'String', 'HostName', rootProject.ext.apidebug.HostName
            //是否使用zipAlign优化apk,Android sdk包里面的工具，能够对打包的应用程序进行优化，让整个系统运行的更快
            zipAlignEnabled false
            //VersionName的后缀
            versionNameSuffix rootProject.ext.android.versionName
            //签名配置文件
            signingConfig signingConfigs.debug
        }
        release {
            //设置release模式下加载的BaseUrl
            buildConfigField 'String', 'HostName', rootProject.ext.apirelease.HostName
            //是否使用zipAlign优化apk,Android sdk包里面的工具，能够对打包的应用程序进行优化，让整个系统运行的更快
            zipAlignEnabled true
            //VersionName的后缀
            versionNameSuffix rootProject.ext.android.versionName
            //签名配置文件
            signingConfig signingConfigs.release
            /**
             * 代码混淆（Obfuscated code）是将程序中的代码以某种规则转换为难以阅读和理解的代码的一种行为。
             * 经过混淆处理之后，我们的 APK 中包名、类名、成员名等都被替换为随机、无意义的名称，增加了代码阅读和理解的困难程度。
             * 混淆后APK难以被逆向工程，即很大程度上增加反编译的成本。此外，Android当中的"混淆"还能够在打包时移除无用资源，显著减少APK体积。
             * 最后，还能以变通方式避免Android中常见的64k方法数引用的限制。
             * 混淆会增加额外的编译时间，所以不建议在 debug 模式下启用。
             */
            /*启用代码收缩、混淆和优化，设置true则默认启用 R8 代码缩减功能。
            启用R8构建项目后会在模块下的build\outputs\mapping\release文件夹下输出下列文件:
            dump.txt：说明 APK 中所有类文件的内部结构。
            mapping.txt：提供原始与混淆过的类、方法和字段名称之间的转换。
            seeds.txt：列出未进行混淆的类和成员。
            unused.txt：列出从 APK 移除的代码。*/
            minifyEnabled true
            //开启资源的压缩。由于资源压缩与代码混淆是协同工作，只有在启用混淆的前提下开启资源压缩才会有效！
            shrinkResources true
            //指定插件使用的混淆文件，第一个文件是Android系统为我们提供的默认混淆规则文件(在sdk/tools/proguard目录下)，第二个是我们想要自定义的混淆规则。
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    /**
     * Cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target 1.6.
     * Please specify proper ‘-jvm-target’ option
     * 原因：项目是用jvm1.6 构建的 而库则用到了1.8 两者不兼容
     * 解决办法：手动配置支持jvm1.8的特性，
     */
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

//依赖配置
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.3.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    //约束布局
    implementation rootProject.ext.dependencies["constraintlayout"]

    //刷新依赖
    implementation rootProject.ext.dependencies["smartrefresh-kernel"]
    implementation rootProject.ext.dependencies["smartrefresh-header"]
    implementation rootProject.ext.dependencies["smartrefresh-footer"]

    //BaseRecyclerViewAdapterHelper
    implementation rootProject.ext.dependencies["baserecyclerview-adapter"]

    //Retrofit+RxJava+RxLifecycle
    implementation rootProject.ext.dependencies["retrofit"]
    implementation rootProject.ext.dependencies["retrofit-converter-gson"]
    implementation rootProject.ext.dependencies["retrofit-adapter-rxjava"]
    implementation rootProject.ext.dependencies["okhttp-log-interceptor"]
    //项目如果用到了rxbinding，可以不用引入rxjava和rxandroid，因为rxbinding的依赖包自带rxjava和rxandroid。
//    implementation rootProject.ext.dependencies["rxjava"]
//    implementation rootProject.ext.dependencies["rxandroid"]
    implementation rootProject.ext.dependencies["rxlifecycle"]
    implementation rootProject.ext.dependencies["rxlifecycle-android"]
    implementation rootProject.ext.dependencies["rxlifecycle-components"]
    implementation rootProject.ext.dependencies["rxlifecycle-kotlin"]

    //RxBinding
    //Platform bindings:
    implementation rootProject.ext.dependencies["rxbinding"]
    //AndroidX library bindings:
    implementation rootProject.ext.dependencies["rxbinding-core"]
    implementation rootProject.ext.dependencies["rxbinding-appcompat"]
    implementation rootProject.ext.dependencies["rxbinding-drawerlayout"]
    implementation rootProject.ext.dependencies["rxbinding-leanback"]
    implementation rootProject.ext.dependencies["rxbinding-recyclerview"]
    implementation rootProject.ext.dependencies["rxbinding-slidingpanelayout"]
    implementation rootProject.ext.dependencies["rxbinding-swiperefreshlayout"]
    implementation rootProject.ext.dependencies["rxbinding-viewpager"]
    implementation rootProject.ext.dependencies["rxbinding-viewpager2"]
    //Google 'material' library bindings:
    implementation rootProject.ext.dependencies["rxbinding-material"]

    //RxPermissions
    implementation rootProject.ext.dependencies["rxpermissions"]

    //logger
    implementation rootProject.ext.dependencies["logger"]

    //今日头条屏幕适配
    implementation rootProject.ext.dependencies["autosize"]

    //语言国际化
    implementation rootProject.ext.dependencies["language"]

    //Glide
    implementation rootProject.ext.dependencies["glide"]
    //使用OkHttp来作为Glide的HTTP通讯组件,添加OkHttp集成库的Gradle依赖将使Glide自动开始使用OkHttp来加载所有来自http和https URL的图片。
    implementation rootProject.ext.dependencies["glide-okhttp-integration"]
    //在 Kotlin 编写的类里使用 Glide 注解，需要引入一个 kapt 依赖，以代替常规的 annotationProcessor 依赖
    //annotationProcessor rootProject.ext.dependencies["glide-compiler"]
    //相比于Glide 3，这里要多添加一个compiler的库，这个库是用于生成Generated API的。如果不想使用集成库或配置Glide，可跳过此选项。
    kapt rootProject.ext.dependencies["glide-compiler"]
    //图片变换开源库（裁剪变换、颜色变换、模糊变换等等）
    implementation rootProject.ext.dependencies["glide-transformations"]

    //MultiDex
    //Dalvik可执行文件分包支持库，android 5.0（minSdkVersion<=20）以下的设备需要
    implementation rootProject.ext.dependencies["multidex"]
}
